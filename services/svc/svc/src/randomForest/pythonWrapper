#!/home/svc/install/epd/bin/python
'''
execfile('/home/bytang/projects/cmac/trunk/services/svc/svc/src/randomForest/pythonWrapper')


'''
HOME='/home/svc'

cr = {
#                              1  2   3  4
    # zzzz
'import_':              1,   # 0  1   1  0
# parameters_
# def_change_labels:     # not working
# def_getRootDir():
# def_extractNC(desFn):
# def_clipEnd(x, w, percL, percR):
# class_SUBSET_REGION():
  # def_noDataExit()
  # def_getFileName2
  # def_getFileName
  # def_getUnits(self):
  # def_checkTime
  # def_subsetting():
  # def_loadFile
  # def_RF1 # this is one used
  # def_saveData(self):
'init_class':           1,   # 1  1
'command_arg':          1,   # 1  1
'plot__':               1,   # 1  1
'':        0,   # 1  1
'':        0,   # 1  1
}

#if cr['']       == 1:
#if cr['']       == 1:

# 1 -- 
# 

if cr['import_']       == 1:
  import os, sys,  time
  import tempfile
  #import math
  import glob
  import re
  #import pickle

  import numpy as np      
  from netCDF4 import Dataset
  import netCDF4 as nC4
  import NC_btang_v4 as NC1

  import matplotlib 
  matplotlib.use('Agg')  
  import matplotlib.pylab as Mat
  Mat.ioff()
  #from mpl_toolkits.basemap import NetCDFFile
  from mpl_toolkits.basemap import Basemap

t00 = time.time()

# parameters_
num2month = {
1: 'JAN',
2: 'FEB',
3: 'MAR',
4: 'APR',
5: 'MAY',
6: 'JUN',
7: 'JUL',
8: 'AUG',
9: 'SEP',
10: 'OCT',
11: 'NOV',
12: 'DEC',
}

modelCenter = [
'cccma',
'csiro',
'gfdl',
'giss',
'ipsl',
'miroc',
'ncar',
'ncc',
'ukmo',
]

obsCenter = [
'nasa',
'noaa',
'argo',
]

oceanVar = [
'ot',
'os',
]

var3d = [
'ta',
'hus',
'clw',
'cli',
'ot',
'os',
]

regridVar = [
'cli',
'clw',
]

# def_change_labels(ax):
def change_labels(ax):
  x1 = Mat.getp(ax, 'xticklabels')
  #x1 = Mat.getp(ax.xaxis, 'ticklabels') # not working
  x1New = []
  for i in range(len(x1)):
    t1 = Mat.getp(x1[i], 'text')
    print t1
    if not t1: 
      t2 = ''
    elif t1[0]==u'\u2212':
      t2 = str(t1[1:]) + 'W'
    elif t1[0]==u'0':
      t2 = str(t1)
    else:
      t2 = str(t1) + 'E'
    x1New.append(t2)
  #
  x1 = Mat.getp(ax, 'yticklabels')

  y1New = []
  for i in range(len(x1)):
    t1 = Mat.getp(x1[i], 'text')
    if not t1: 
      t2 = ''
    elif t1[0]==u'\u2212':
      t2 = str(t1[1:]) + 'S'
    elif t1[0]==u'0':
      t2 = str(t1)
    else:
      t2 = str(t1) + 'N'
    y1New.append(t2)
  Mat.setp(ax, xticklabels=x1New, yticklabels=y1New)
  return x1New, y1New

# def_getRootDir():
def getRootDir():
  # use data.cfg to set the data root dir.

  # assuming the cwd is in src/*
  configFile = '../../../data.cfg'

  # if not, use 'trunk' to figure it out  
  #if not os.path.isfile(configFile):
  if 1:
    cwd = os.getcwd()
    ind1 = cwd.find('trunk')
    if ind1>-1:
      cmacDir = cwd[:ind1]
      configFile = cmacDir + '/trunk/services/svc/data.cfg'

    if not os.path.isfile(configFile):
      print 'failed to find data.cfg.'
      return None 
    
  try:
    temp1 = open(configFile).read() 
    if temp1[-1]=='\n':
      temp1 = temp1[:-1]
    if temp1[-1]=='/':
      temp1 = temp1[:-1]
    if os.path.isdir(temp1):
      dataDir = temp1 + '/cmip5' 
      #a.dataDir = temp1  # should change to this when data.cfg is without 'cmip5'
      return dataDir, cmacDir
        
  except:
    print 'failed to read data.cfg.'
    return None

  print 'failed to get data.cfg.'
  return None

# def_extractNC(desFn):
p1 = re.compile("S_FILENAME += *\'(.+\.nc)\'")
def extractNC(desFn):
  lines = open(desFn).read()
  # S_FILENAME    = '/mnt/r1i1p1_plevRegridded_198412-200511.nc'

  m1 = p1.search(lines)
  return m1.groups()[0]

# def_clipEnd(x, w, percL, percR):
def clipEnd(x, w, percL, percR):
  indS = np.argsort(x)
  x1 = x[indS]
  w1 = w[indS]
  sum1 = np.cumsum(w1)
  threshL = sum1[-1]*percL
  threshR = sum1[-1]*(1.0 - percR)
  indL = max( np.searchsorted(sum1, threshL) - 1, 0 )
  indR = min( np.searchsorted(sum1, threshR) + 1, len(x) )
 
  return x1[indL], x1[indR]

# class_SUBSET_REGION():
class SUBSET_REGION():
  #== def___init__
  def __init__(self):
    self.dataDir, self.cmacDir = getRootDir()
    if self.dataDir is None:
      sys.exit(1)

    self.scatterDir = '%s/trunk/services/svc/svc/src/scatterPlot2V'%self.cmacDir

    ### self.ferretCmd = '/home/bytang/install/bin/ferret' 
    # /mnt/xvdf/data/
    if self.dataDir.find('xvdf')>-1:
      self.ferretCmd = '/home/sflops/install/bin/ferret'
    else:
      self.ferretCmd = '/home/svc/install/bin/ferret' 

    self.clipL = 0.02
    self.clipR = 0.02

    self.ferretMem = 100
    self.isDiffPlot = 0

    #self.dataDir = '/mnt/hgfs/cmacws/data1/data/cmip5'
    ### self.desDir = '/home/bytang/projects/cmac/des/original'
    #self.desDir = '/home/svc/cmac/des/original'

    # zzzz
    #self.desDir = '/home/bytang/projects/cmac/tmp/des'  # for Benyang's testing
    self.desDir = os.path.split(self.dataDir)[0] + '/des'  # for deployment
    self.desDir = '%s/des'%self.scatterDir  # ad hoc fix for summer school

    self.inFile = '' 
    self.inFile2 = '' 
#   self.inFileBU = '' 
#   self.netcdfFile = '' 
#   self.netcdfDirRemote = '' 
#   self.pngFile = '' 
#   self.pdfFile = '' 
#   self.lockFile = '' 
#
#   self.isCoastline = 1 
#   self.regionName = '' 
#   self.dataName = '' 
#   self.dateStr = '' 
#
#   self.regionTitle = 'same' 
#   self.dataTitle = 'same' 
#   self.dateTitle = 'same' 
#
#   self.offset = 0.0 
#

    if 0:
      self.lon1S = -10.5
      self.lon1E = 20.3
      #self.dLon = 1.0

    if 0:
      self.lon1S = -180.0
      self.lon1E = 180.0
      #self.dLon = 1.0
  
    if 0:
      self.lat1S = -70.1
      self.lat1E = -20.9
      #self.dLat = 1.0

    if 1:
      self.lon1S = -180.0
      self.lon1E = 180.0

    if 1:
      self.lat1S = -80.0
      self.lat1E =  80.0

#
    if 1:
      self.center1 = 'ukmo'
      self.model1  = 'hadgem2-a'
      self.varName1='ts'

    if 0:
      self.center2 = 'giss'
      self.model2  = 'e2-r'
      #self.varName2='rsdt'
      self.varName2='ts'

    if 1:
      self.center2 = 'gfdl'
      #self.model2  = 'esm2g'
      self.model2  = 'cm3'
      #self.varName2='rsdt'
      self.varName2='ta'  # working
      self.varName2='clw' # not working
      self.varName2='lai' # not working

    if 0:
      self.center2 = 'ukmo'
      self.model2  = 'hadgem2-a'
      self.varName2='ts'
      #self.varName2='cli'

    self.nDim = 3

    self.pres1 = 3000
    self.pres2 = 3000

    self.yearS = 1990
    self.yearE = 1991

    self.monthS = 1
    self.monthE = 1

    self.dayS = 15
    self.dayE = 15

    self.nSample = 500

    self.outDir = '.'
  
    self.noData = None

  #== def_derived
  def derived(self):
    pass

  # def_noDataExit()
  def noDataExit(self, msg):
    print "No Data !!!"
    print msg
    sys.exit(1)

  # not used. Use the des file instead.
  # def_getFileName(self, center, model, varName):
  def getFileName(self, center, model, varName):
    # the original is just for model
    if center in modelCenter:
      if varName in regridVar:
        dir0 = '%s/%s/%s/regridded'%(self.dataDir, center, model)
      else:
        dir0 = '%s/%s/%s/original'%(self.dataDir, center, model)
 
    else:
      dir0 = '%s/%s/%s'%(self.dataDir, center, model)

    desDir = self.desDir

    filesNc = glob.glob('%s/%s_*.nc'%(dir0, varName))
    desFn = '%s/%s_%s_%s.des'%(desDir, center, model, varName)
    filesDes = glob.glob(desFn)
    if 1:
      print dir0
      print 'filesNc, filesDes:'
      print center, model, varName
      print filesNc
      print filesDes

    # yyyy
    if len(filesNc)==0:
      self.noDataExit('no *.nc file.')

    if len(filesDes)>1:
      print 'more than 1 des files:'
      for f in filesDes:
        print f

      self.noDataExit('more than 1 *.des files.')
      return None

    if len(filesNc)>1 and len(filesDes)==1:
      return filesDes[0], filesNc[0]

    if len(filesNc)>1 and len(filesDes)==0:
      try:
        temp1 = '/home/bytang/bin/mine/mkdes2 --f90 --des %s %s/%s_*.nc'%(desFn, dir0, varName)
        print temp1
        os.system(temp1)
        files2a = glob.glob(desFn)
        return files2a[0], filesNc[0]
      except:
        self.noDataExit('failed to generate the des file.')
      
    if len(filesNc)==1:
      return filesNc[0], filesNc[0]
 
    return None

  # def_getFileName2(self, center, model, varName):
  def getFileName2(self, center, model, varName):
    dir0 = '%s/%s_%s'%(self.desDir, center, model)
    fileNc = glob.glob('%s/%s.nc'%(dir0, varName))
    print '%s/%s.nc'%(dir0, varName)
    if len(fileNc)>0:
      return fileNc[0], fileNc[0] 

    else:
      print '%s/%s.des'%(dir0, varName)
      fileDes = glob.glob('%s/%s.des'%(dir0, varName))

      if len(fileDes)==0:
        return None

      # def_extractNC(desFn):
      return fileDes[0], extractNC(fileDes[0])

  # def_getUnits(self):
  def getUnits(self):
    nc1 = Dataset(self.inFile1Nc, 'r')
    data = nc1.variables[self.varName1]
    self.units1 = data.units
    nc1.close()

    nc1 = Dataset(self.inFile2Nc, 'r')
    data = nc1.variables[self.varName2]
    self.units2 = data.units
    nc1.close()

  # def_checkTime
  # not used yet
  def checkTime(self, ncFile, varName):
    # open file
    nc1 = Dataset(ncFile, 'r')

    # read time
    data = nc1.variables[varName]
    dims = data.dimensions
    timeName = dims[0]
    time1 = nc1.variables[timeName]

    tS = nC4.num2date(time1[0], time1.units)
    tE = nC4.num2date(time1[-1], time1.units)

    tNumS = nC4.date2num(datetime.datetime(self.yearS, self.monthS, self.dayS, 0,0,0), time1.units)
    tNumE = nC4.date2num(datetime.datetime(self.yearE, self.monthE, self.dayE, 0,0,0), time1.units)

    if tNumS<time1[0]:
      self.yearS = tS.year
      self.monthS = tS.month
      self.dayS = tS.day
      print 'start time changed to: %d-%2d-%2d'%(self.yearS, self.monthS, self.dayS)


    if tNumE>time1[-1]:
      self.yearE = tE.year
      self.monthE = tE.month
      self.dayE = tE.day
      print '  end time changed to: %d-%2d-%2d'%(self.yearE, self.monthE, self.dayE)

    nc1.close()

  # def_subsetting():
  def subsetting(self, ncFile1, varName1, ncFile2=None, varName2='DATA1', 
         varNameOut='DATA1', interp='', dim=4, lev=-1, isAve=0):

    try:
      temp1 = os.path.isfile(ncFile1)
    except:
      print 'Subsetting failed; file not there: %s'%(ncFile1)
      self.noData = 1
      tempFile = None
      return tempFile
    
    if not os.path.isfile(ncFile1):
      print 'Subsetting failed; file not there: %s'%(ncFile1)
      self.noData = 1
      tempFile = None
      return tempFile
      
    aveStr = ''
    if isAve==1:
      aveStr = '@ave'

    if self.noData ==1:
      self.noDataExit('in subsetting: nc file is not there.')
     
    tempFile = tempfile.mkstemp(suffix='.nc', dir=self.outDir)

    tmpFileJnl = tempfile.mkstemp(suffix='.jnl', dir=self.outDir)
    #print varName, tempFile, tmpFileJnl

    dimStr = ''
    if dim==3:
      dimStr = ', t="15-%s-%d":"15-%s-%d"%s'\
%(num2month[self.monthS], self.yearS, num2month[self.monthE], self.yearE, aveStr)
    elif dim==4:
      if lev<0:
        dimStr = ', k=1, t="15-%s-%d":"15-%s-%d"%s'\
%(num2month[self.monthS], self.yearS, num2month[self.monthE], self.yearE, aveStr)
      else:
        dimStr = ', z=%g@itp, t="15-%s-%d":"15-%s-%d"%s'\
%(lev, num2month[self.monthS], self.yearS, num2month[self.monthE], self.yearE, aveStr)

      if 0:
        dimStr = ', k=1, t="15-%s-%d":"15-%s-%d"%s'\
%(num2month[self.monthS], self.yearS, num2month[self.monthE], self.yearE, aveStr)

    #  
    if ncFile2 is None:
      script1 = '''
  SET MEMORY/SIZE=%d  
  show memory
  SET mode desperate:100000

  ! 3
  use "%s"
  !show data

  !define var/bad=-9999.0/title="aa" data1 =SST[d=1, g=newG@nrst, l=1]
  ! This is too slow:
  !define var/bad=-9999.0/title="aa" data1 =SST[d=1, g=newG@ave, l=1]
  ! Default is linear interpolation. As fast as nrst: 
  ! 4
  define var/bad=-9999.0/title="aa" %s =%s[d=1, x=%f:%f, y=%f:%f %s]
  ! 5
  save/clobber/file="%s" %s
  '''%(
  self.ferretMem, 
  # 3
  ncFile1, 
  # 4
  varNameOut,
  varName1,
  self.lon1S,
  self.lon1E,
  self.lat1S,
  self.lat1E,
  #interp,
  dimStr,
  # 5
  tempFile[1],
  varNameOut)

    else:
      script1 = '''
  SET MEMORY/SIZE=%d  
  show memory
  SET mode desperate:100000

  ! 3
  use "%s"
  use "%s"
  !show data

  
  !define var/bad=-9999.0/title="aa" data1 =SST[d=1, g=newG@nrst, l=1]
  ! This is too slow:
  !define var/bad=-9999.0/title="aa" data1 =SST[d=1, g=newG@ave, l=1]
  ! Default is linear interpolation. As fast as nrst: 
  ! 4
  define var/bad=-9999.0/title="aa" %s =%s[d=1, g=%s[d=2, l=1]%s %s]
  ! 5
  save/clobber/file="%s" %s
  '''%(
  self.ferretMem, 
  # 3
  ncFile1, 
  ncFile2, 
  # 4
  varNameOut,
  varName1,
  varName2,
  interp,
  dimStr,
  # 5
  tempFile[1],
  varNameOut)

    open(tmpFileJnl[1], 'w').write(script1)

    temp1 = '%s -gif -script %s' %(self.ferretCmd, tmpFileJnl[1])

    try:
      os.system(temp1)
    except:
      self.noDataExit('subsetting: failed to run ferret')

    #os.remove(tmpFileJnl)

    if not os.path.isfile(tempFile[1]):
      self.noDataExit('subsetting: ferret failed to generate a nc file.')

    if os.stat(tempFile[1]).st_size<10:
      self.noDataExit('subsetting: ferret failed to generate a nc file.')

    return tempFile[1]

  # def_loadFile
  def loadFile(self, ncFile, varName='DATA1'):
    nc1 = Dataset(ncFile, 'r')
    data = nc1.variables[varName][:]
    nc1.close()

    #zzzz 
    if len(data.shape)==3:
      data = data[0, :,:]
    return data
 
  # def_RF1 # this is one used
  def RF1(self, ncFile1, ncFile2, ncFile3, varName1='DATA1', varName2='DATA2', varName3='DATA3'):
    nBin = 30 
    nBin1 = 40 

    # open file
    nc1 = Dataset(ncFile1, 'r')
    nc2 = Dataset(ncFile2, 'r')
    nc3 = Dataset(ncFile3, 'r')

    ncVar1 = nc1.variables[varName1]
    ncVar2 = nc2.variables[varName2]
    ncVar3 = nc3.variables[varName3]

    print ncVar1.shape

    nMonth = ncVar1.shape[0]
 
    # how many points to take each month
    nSampleM = self.nSample/nMonth + 1 

    # hold data for scatter plot
    dataAll1 = []
    dataAll2 = []
    dataAll3 = []

    # loop over time
    monthCount = 0
    for iMonth in range(nMonth):
      monthCount += 1
      a1 = ncVar1[iMonth]
      a2 = ncVar2[iMonth]
      a3 = ncVar3[iMonth]

      # sometimes the 2 data may not have the save shape
      if (a1.shape[-1] != a2.shape[-1]) or (a1.shape[-1] != a3.shape[-1]):
        min1 = min(a1.shape[-1], a2.shape[-1], a3.shape[-1]) 
        a1 = a1[:, :min1] 
        a2 = a2[:, :min1] 
        a3 = a3[:, :min1] 

      if (a1.shape[0] != a2.shape[0]) or (a1.shape[0] != a3.shape[0]):
        min1 = min(a1.shape[0], a2.shape[0], a3.shape[0]) 
        a1 = a1[:min1,:] 
        a2 = a2[:min1,:] 
        a3 = a3[:min1,:] 

      # remove the invalid data
      temp1 = np.ma.arange(5)
      valid1 = np.ones( a1.shape )
      valid2 = np.ones( a1.shape )
      valid3 = np.ones( a1.shape )
      if type(a1) == type(temp1):
        if a1.mask is not None:
          valid1 = ~( a1.mask )
      if type(a2) == type(temp1):
        if a2.mask is not None:
          valid2 = ~( a2.mask )

      valid = valid1 & valid2 & valid3
      aa1 = a1[valid]
      aa2 = a2[valid]
      aa3 = a3[valid]

#     if valid is not None:
#       aa1 = a1[valid]
#       aa2 = a2[valid]
#       aa3 = a3[valid]
#     else:
#       aa1 = a1
#       aa2 = a2

      aa1 = aa1.ravel()
      aa2 = aa2.ravel()
      aa3 = aa3.ravel()

      dataAll1.append(aa1)
      dataAll2.append(aa2)
      dataAll3.append(aa3)
        
    nc1.close()
    nc2.close()
    nc3.close()

    # concatenate data  for scatter plot
    aaa1 = np.concatenate( dataAll1, axis=0 )
    aaa2 = np.concatenate( dataAll2, axis=0 )
    aaa3 = np.concatenate( dataAll3, axis=0 )

    # figure
    fig1 = Mat.figure(figsize=(10,25))
    Mat.clf()

    # plot scatter plot
    Mat.subplot(3,1,1)
    #fig1.tight_layout()

    Mat.scatter(aaa1, aaa2)
    Mat.ylim(min2a,max2a)
    Mat.xlim(min1a,max1a)
    if self.varName1==self.varName2:
      Mat.hold('on')
      Mat.plot([min1, max1], [min1, max1], 'r-')
      Mat.hold('off')

    Mat.xlabel('%s_%s:%s (%s)'%(self.center1, self.model1, self.varName1, self.units1))
    Mat.ylabel('%s_%s:%s (%s)'%(self.center2, self.model2, self.varName2, self.units2))

    # corr
    corr1 = np.corrcoef(aaa1,aaa2) 
    print 'corr1:  ',
    print corr1.shape
    print corr1
    #Mat.title('corr coef = %.4f'%(corr1[0,1]))
    Mat.title('corr coef = %.4f.  Period: %d/%02d-%d/%02d.  Number of random points: %d'%(corr1[0,1], 
        self.yearS, self.monthS,
        self.yearE, self.monthE,
        self.nSample, 
        ))

    # concatenate data for histogram
    hist1 = np.concatenate( histAll1, axis=0 ).astype('f')
    hist2 = np.concatenate( histAll2, axis=0 ).astype('f')
    center1 = np.concatenate( binsAll1, axis=0 )
    center2 = np.concatenate( binsAll2, axis=0 )

    bins12 = nBin

    # histogram 1
    axes2 = Mat.subplot(3,1,2)
    n1, bins1a, patches1 = Mat.hist(center1, bins=bins12, range=(min1,max1), 
                weights=hist1/hist1.sum(),
                color='red', histtype='bar', rwidth=0.8)
    Mat.ylabel('probability density distribution')
    #Mat.title('%s_%s:%s'%(self.center1, self.model1, self.varName1))
    Mat.title('%s_%s:%s. Histogram(%d/%02d - %d/%02d)'%(self.center1, self.model1, 
        self.varName1, 
        self.yearS, self.monthS,
        self.yearE, self.monthE,
        ))
    if self.varName1==self.varName2:
      pass
      #Mat.ylim(0, histMax*1.1)

    # histogram 2
    axes3 = Mat.subplot(3,1,3)
    n2, bins2a, patches2 = Mat.hist(center2, bins=bins12, range=(min2,max2),
                weights=hist2/hist2.sum(),
                color='blue', histtype='bar', rwidth=0.8)
    Mat.ylabel('probability density distribution')
    #Mat.title('%s_%s:%s'%(self.center2, self.model2, self.varName2))
    Mat.title('%s_%s:%s. Histogram(%d/%02d - %d/%02d)'%(self.center2, self.model2, 
        self.varName2, 
        self.yearS, self.monthS,
        self.yearE, self.monthE,
        ))
    if self.varName1==self.varName2:
      histMax = max(n1.max(), n2.max())
      Mat.ylim(0, histMax*1.1)

      Mat.axes(axes2)
      Mat.ylim(0, histMax*1.1)

    # output png file
    figFile = '%s/scatter.png'%self.outDir
    Mat.savefig(figFile, dpi=100)

    print 'figFile: %s'%figFile

  # def_saveData(self):
  def saveData(self, tempFile1, tempFile2):
    fn = '%s/data_compare.nc'%self.outDir

    # load data
    nc1 = Dataset(tempFile1, 'r')
    data1a = nc1.variables['DATA1']
    dims1 = data1a.dimensions
    data1 = data1a[:]
    lon1 = nc1.variables[dims1[-1]][:]
    lat1 = nc1.variables[dims1[-2]][:]

    nDim1 = len(data1.shape)
    if nDim1==3:
      time1 = nc1.variables[dims1[0]][:]

    nc1.close()

    nc2 = Dataset(tempFile2, 'r')
    data2a = nc2.variables['DATA2']
    dims2 = data2a.dimensions
    data2 = data2a[:]
    lon2 = nc2.variables[dims2[-1]][:]
    lat2 = nc2.variables[dims2[-2]][:]

    nDim2 = len(data2.shape)
    if nDim2==3:
      time2 = nc2.variables[dims2[0]][:]

    nc2.close()

    # sometimes the 2 data may not have the save shape
    nLon = min( len(lon1), len(lon2) )
    nLat = min( len(lat1), len(lat2) )
    if len(lon1)>nLon or len(lat1)>nLat:
      lon1 = lon1[:nLon]
      lat1 = lat1[:nLat]
      data1 = data1[..., :nLat, :nLon]

    if len(lon2)>nLon or len(lat2)>nLat:
      lon2 = lon2[:nLon]
      lat2 = lat2[:nLat]
      data2 = data2[..., :nLat, :nLon]

    # fill the missing data
    if type(data1)==type(np.ma.arange(1)):
      data1a = data1.filled(-9999.0)
    else: 
      data1a = data1

    if type(data2)==type(np.ma.arange(1)):
      data2a = data2.filled(-9999.0)
    else: 
      data2a = data2

    # save the 2 variables
    if nDim1==2:
      NC1.save2nc(data1a, ncfile=fn, name='data1', 
        newfile=1,
        format='NETCDF3_CLASSIC',
        missing_value=-9999.0,
        axisorder='yx', axislib=NC1.axislib0, axisarray=[lat1, lon1])
    else:
      NC1.save2nc(data1a, ncfile=fn, name='data1', 
        newfile=1,
        format='NETCDF3_CLASSIC',
        missing_value=-9999.0,
        axisorder='tyx', axislib=NC1.axislib0, axisarray=[time1,lat1, lon1])

    nc1 = Dataset(fn, 'r+')

    if nDim2==2:
      d2 = nc1.createVariable('data2', 'float32', ('lat', 'lon'))
    else:
      d2 = nc1.createVariable('data2', 'float32', ('time', 'lat', 'lon'))

    #print d2.shape
    #print data2.shape
    # zzzz
    #nn0 = min( d2.shape[0], data2.shape[0])
    #nn1 = min( d2.shape[1], data2.shape[1])
    d2[:] = data2a
    nc1.close()

    print 'dataFile: %s'%fn
    
if cr['init_class']       == 1:
  a = SUBSET_REGION()

if cr['command_arg']       == 1:

  '''
- interface:
 model1
 var1
 lavel1
 model2
 var2
 lavel2
 model3
 var3
 lavel3
 months
 lon1,lon2
 lat1,lat2
 outDir
''' 
  #     inputs = \
  #              self.model1 + ' ' + self.var1 + ' ' + self.start_time1 + ' ' + self.end_time1 + ' ' + \
  #              self.lon1a + ',' + self.lon1b + ' ' + self.lat1a + ',' + self.lat1b + ' ' + \
  #              self.model2 + ' ' + self.var2 + ' ' + self.start_time2 + ' ' + self.end_time2 + ' ' + \
  #              self.lon2a + ',' + self.lon2b + ' ' + self.lat2a + ',' + self.lat2b + ' ' + \
  #              self.output_dir

  if len(sys.argv)>1:
    argv = sys.argv

    print 'len(argv) = ',
    print len(argv)
    print 'argv: '
    for i in argv:
      print i

    # arg 1
    ii = 1
    temp1 = argv[ii].split('_')
    a.center1 = temp1[0]
    a.model1 = temp1[1]

    # arg 2
    ii += 1
    a.varName1 = argv[ii]

    # arg 3
    if 1:
      ii += 1
      try:
        a.pres1 = float(argv[ii])
      except ValueError:
        a.pres1 = -1
      if a.pres1>0 and (a.varName1 not in oceanVar):
        a.pres1 *= 100.0

    # arg 4
    ii += 1
    temp1 = argv[ii].split('_')
    a.center2 = temp1[0]
    a.model2 = temp1[1]

    # arg 5
    ii += 1
    a.varName2 = argv[ii]

    # arg 6
    if 1:
      ii += 1
      try:
        a.pres2 = float(argv[ii])
      except ValueError:
        a.pres2 = -1
      if a.pres2>0 and (a.varName2 not in oceanVar):
        a.pres2 *= 100.0

    # arg 7
    ii += 1
    temp1 = argv[ii].split('_')
    a.center3 = temp1[0]
    a.model3 = temp1[1]

    # arg 8
    ii += 1
    a.varName3 = argv[ii]

    # arg 9
    if 1:
      ii += 1
      try:
        a.pres3 = float(argv[ii])
      except ValueError:
        a.pres3 = -1
      if a.pres3>0 and (a.varName3 not in oceanVar):
        a.pres3 *= 100.0

    # arg 10
    ii += 1
    temp1 = argv[ii].split(',')
    a.months = [int(i) for i in temp1]
    if a.months[0]==-1:
      a.months = range(1,13)

    # arg 11
    ii += 1
    temp1 = argv[ii].split(',')
    a.lon1S = float(temp1[0])
    a.lon1E = float(temp1[1])

    # arg 12
    ii += 1
    temp1 = argv[ii].split(',')
    a.lat1S = float(temp1[0])
    a.lat1E = float(temp1[1])

    # arg 13
    ii += 1
    a.outDir = argv[ii]
    print 'a.outDir: ',
    print a.outDir

if cr['plot__']       == 1:
  # get file names
  #try: 
  if 1: 
    a.inFile1, a.inFile1Nc = a.getFileName2(a.center1, a.model1, a.varName1) 
  if 0:
  #except:
    print 'error: file 1 not there'
    sys.exit()
 
  try: 
    a.inFile2, a.inFile2Nc = a.getFileName2(a.center2, a.model2, a.varName2) 
  except:
    print 'error: file 2 not there'
    sys.exit()

  #print a.inFile1
  #print a.inFile2
  a.getUnits()

  # subset
  tempFile1 = a.subsetting(a.inFile1, a.varName1, dim=4, lev=a.pres1)
  tempFile2 = a.subsetting(a.inFile2, a.varName2, ncFile2=tempFile1, varNameOut='DATA2', dim=4, lev=a.pres2)
  tempFile3 = a.subsetting(a.inFile3, a.varName3, ncFile2=tempFile1, varNameOut='DATA3', dim=4, lev=a.pres3)

  if 1:
    a.scatterPlot3(tempFile1,tempFile2)

  a.saveData(tempFile1, tempFile2)

  print 'tempFiles:'
  print tempFile1
  print tempFile2

