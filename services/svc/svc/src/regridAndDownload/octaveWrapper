#!/usr/bin/octave -q

addpath([pwd()  '/../util/']);

pkg load netcdf;

arg_list = argv();
printf ("program name: %s\n", program_name());

narg = length(arg_list);

if narg < 2
  error('Insufficient argument, need a model and a variable name!'); 
end
sourceName = lower(arg_list{1});
printf ("sourceName: %s\n", sourceName);
varName = arg_list{2};
printf ("varName: %s\n", varName);

if narg > 2
  startTimeStr = arg_list{3};
  startTime = struct('year', str2num(startTimeStr(1:4)), 'month', str2num(startTimeStr(5:6)));
end

if narg > 3
  stopTimeStr = arg_list{4};
  stopTime = struct('year', str2num(stopTimeStr(1:4)), 'month', str2num(stopTimeStr(5:6)));
end

% Default grid, 2 x 2.5 deg, MLS grid
lon = 2.5*(0:143);
lat = 2*(-45:45);

if narg > 4
  lon_grid = str2num(arg_list{5});
  printf ("longitude grid (min, max, resolution): (%d, %d, %d) \n", lon_grid(1), lon_grid(2), lon_grid(3));
  lon = lon_grid(1):lon_grid(3):lon_grid(2);
end

if narg > 5
  lat_grid = str2num(arg_list{6});
  printf ("latitude grid (min, max, resolution): (%d, %d, %d) \n", lat_grid(1), lat_grid(2), lat_grid(3));
  lat = lat_grid(1):lat_grid(3):lat_grid(2);
end

% Default CMIP5 pressure levels
plev = plevForRegrid();

if narg > 6
  plev = str2num(strrep(arg_list{7}, ',', ' '));
  printf ("pressure levels : %s Pa\n", arg_list{5});
end

overwrite = false;
if narg > 7
  overwrite = (arg_list{8} ~= 0);
end

if narg > 8
  outputFile = arg_list{9};
  printf("1. %s\n", arg_list{1})
  printf("2. %s\n", arg_list{2})
  printf("3. %s\n", arg_list{3})
  printf("4. %s\n", arg_list{4})
  printf("5. %s\n", arg_list{5})
  printf("6. %s\n", arg_list{6})
  printf("7. %s\n", arg_list{7})
  printf("8. %s\n", arg_list{8})
  printf("9. %s\n", arg_list{9})
end 

if exist(outputFile, 'file')
  if overwrite
    delete(outputFile);
  else
    warning('!!! output file exists, use overwrite flag to replace it!');
    return;
  end
end

dataFileFullPath = getDataFilePaths(sourceName, varName, startTime, stopTime);

nFile = length(dataFileFullPath);

disp(nFile)

outFiles = cell(nFile,1);

for fileI = 1:nFile
  thisInputFile = dataFileFullPath{fileI};
  [thisPath, thisName] = fileparts(thisInputFile);
  outFiles{fileI} = ['/tmp/' thisName, '_tmp.nc'];
  status = regridAndDownload(thisInputFile, outFiles{fileI}, varName, lon, lat, plev);
end
